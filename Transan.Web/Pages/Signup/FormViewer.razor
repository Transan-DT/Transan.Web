@page "/signup/view/{SnowflakeStr}"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FormService<FormSignup> SignupService
@inject SignupControlService SignupControlService
@inject DiscordClient DiscordClient
@attribute [Authorize(Roles = UserRoles.Moderator)]

<h1 class="mb-4 mb-md-5">Formulaire d'Inscription</h1>

@if (!Loaded)
{
	<h3 class="text-info">Chargement...</h3>
}
else if (Form is null)
{
	<h3 class="text-warning">Aucune inscription trouvée.</h3>
}
else
{
	<div class="row justify-content-between mb-5">
		<div class="col-md-4 my-4 order-md-last">
			<table class="table table-borderless">
				<tbody>
					<tr><th>Formulaire envoyé</th><td>@Form.SubmittedAt.ToString()</td></tr>
					<tr><th>Adresse IP</th><td class="font-monospace">@Form.IpAddress</td></tr>
					<tr><th>Orientation</th><td>@Form.Orientation.ToDisplayString()</td></tr>
					<tr><th>Snowflake</th><td class="font-monospace">@Form.UserSnowflake</td></tr>

					@if (User is not null)
					{
						<tr><th>Nom d'Utilisateur</th><td>@User.GetFullUsername()</td></tr>
						<tr><th>Compte créé</th><td>@User.CreationTimestamp.UtcDateTime.ToString()</td></tr>
					}

					@if (Form.Orientation is Orientation.Cisgender)
					{
						<tr><th>Invitation</th><td>@Form.ReferalUser</td></tr>
					}
				</tbody>
			</table>
		</div>

		<div class="col-md-6 my-4">
			<div class="mb-5">
				<h4 class="mb-3">Présentation</h4>
				<p style="white-space:pre-wrap;">@Form.Presentation</p>
			</div>

			<div class="mb-5">
				<h4 class="mb-3">Motivation</h4>
				<p style="white-space:pre-wrap;">@Form.Motivation</p>
			</div>

			<div class="mb-5">
				<h4 class="mb-3">Définition de "@Form.Orientation.ToDisplayString()"</h4>
				<p style="white-space:pre-wrap;">@Form.OrientationDefinition</p>
			</div>
		</div>
	</div>

	<div class="my-5">
		<h2 class="mb-3">Décision</h2>

		@if (Member is null)
		{
			<h5 class="text-warning">L'utilisateur n'est pas présent sur le serveur.</h5>
		}
		else if (MemberRoles.Contains(UserRoles.Member))
		{
			<h5 class="text-info">L'utilisateur est déjà Membre du serveur.</h5>
		}
		else if (accepted)
		{
			<h5 class="text-success">L'utilisateur a été accepté.</h5>
		}
		else if (rejected)
		{
			<h5 class="text-success">L'utilisateur a été refusé.</h5>
		}
		else
		{
			<div class="row justify-content-between m-5">
				<div class="col d-grid gap-2">
					<button class="btn btn-lg btn-block btn-success" @onclick=AcceptMemberAsync>Accepter</button>
				</div>

				<div class="col d-grid gap-2">
					<button class="btn btn-lg btn-block btn-secondary" @onclick="() => { controlModal.Show = true; }" disabled=@controlled>Contrôler</button>
				</div>

				<div class="col d-grid gap-2">
					<button class="btn btn-lg btn-block btn-danger" @onclick="() => { rejectModal.Show = true; }">Rejeter</button>
				</div>
			</div>
		}
	</div>

	<ControlModal @ref=controlModal
				  OnSubmit="(parameters) => { ControlMemberAsync(parameters); }"
				  OnCancel="() => { controlModal.Show = false; }" />

	<RejectModal @ref=rejectModal
				  OnSubmit="(parameters) => { RejectMemberAsync(parameters); }"
				  OnCancel="() => { rejectModal.Show = false; }" />
}

@code {
	[Parameter] public string SnowflakeStr { get; init; }

	public bool Loaded { get; private set; }
	public FormSignup Form { get; set; }
	public DiscordUser User { get; private set; }
	public DiscordMember Member { get; private set; }
	public DiscordMember Garantor { get; private set; }
	public IEnumerable<string> MemberRoles { get; private set; }

	private bool accepted, controlled, rejected;

	private ControlModal controlModal;
	private RejectModal rejectModal;

	protected override async Task OnParametersSetAsync()
	{
		Loaded = false;

		if ((Form = (await SignupService.GetUserFormsAsync(Convert.ToUInt64(SnowflakeStr))).FirstOrDefault()) is not null)
		{
			User = await DiscordClient.GetUserAsync(Form.UserSnowflake);

			if ((Member = await SignupControlService.ResolveMemberAsync(Form.UserSnowflake)) is not null)
			{
				MemberRoles = SignupControlService.GetMemberRoles(Member);
			}
		}

		Garantor = await SignupControlService.ResolveMemberAsync(Convert.ToUInt64((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue(ClaimTypes.NameIdentifier)));

		await base.OnParametersSetAsync();
		Loaded = true;
	}

	private Task AcceptMemberAsync()
	{
		accepted = true;
		return SignupControlService.AcceptNewMemberAsync(Member, Garantor);
	}

	private Task ControlMemberAsync(ControlModal.ParametersModel parameters)
	{
		controlled = true;
		controlModal.Show = false;
		return SignupControlService.ControlNewMemberAsync(Member, Garantor, parameters.Reason);
	}

	private Task RejectMemberAsync(RejectModal.ParametersModel parameters)
	{
		rejected = true;
		rejectModal.Show = false;



		return SignupControlService.RejectNewMemberAsync(Member, Garantor, parameters.Reason, (parameters.Kick, parameters.Ban) switch
		{
			(_, true) => SignupControlService.RejectAction.Ban,
			(true, _) => SignupControlService.RejectAction.Kick,

			_ => SignupControlService.RejectAction.None
		});
	}
}
