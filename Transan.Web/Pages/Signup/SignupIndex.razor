@page "/signup"
@layout CoverLayout
@inject IConfiguration Configuration
@inject FormService<FormSignup> SignupService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor


<AuthorizeView Roles=@UserRoles.Joined>
	<Authorized>
		@if (formWasSubmitted)
		{
			<h1 class="text-success mb-5">Merci !</h1>
			<p class="lead text-secondary">Nous avons bien reçu votre formulaire, et notre Modération vérifiera votre inscription sous peu. Patience ! ;)</p>
		}
		else if (SignupService.ListForms().Where(f => f.UserSnowflake == userSnowflake).Any())
		{
			<h3 class="text-info">Vous avez déjà rempli le formulaire.</h3>
		}
		else
		{
			<div class="mb-5">
				<div class="my-5">
					<h3 class="text-secondary mb-3"><i class="bi bi-exclamation-circle me-3 me-md-5"></i>Avant de Commencer...</h3>
					<p class="lead">Veuillez noter que ce formulaire d'inscription nous permet de vérifier et filtrer les nouveaux arrivants afin de protéger notre communauté.</p>
				</div>

				<div class="my-5">
					<h3 class="mb-3"><i class="bi bi-shield-check me-3 me-md-5"></i>Confidentialité & Sécurité</h3>

					<p>
						Nous transmettons votre identifiant aux équipes de confiance et sécurité de Discord si vous commettez des actes graves, ou contraires aux TOS de Discord. <br />
						Après l'envoi de votre formulaire, votre formulaire sera étudié par notre équipe de modération et conservé pendant 5 ans. <br />
						Nous nous réservons le droit de transmettre votre formulaire s'il nous paraît suspect, afin que le serveur reste le plus sûr possible.
					</p>
				</div>
			</div>

			<SignupForm OnValidSubmit=OnValidForm />
		}
	</Authorized>

	<NotAuthorized>
		@if (user.Identity.IsAuthenticated)
		{
			<h3 class="text-info">Pour accéder à l'inscription, veuillez d'abord <NavLink href=@Configuration["ExtLinks:Discord"]>rejoindre le serveur</NavLink>.</h3>
		}
		else
		{
			<h3 class="text-info">Pour accéder à l'inscription, veuillez d'abord <NavLink href="/login">vous connecter</NavLink>.</h3>
		}
	</NotAuthorized>
</AuthorizeView>




@code {
	[CascadingParameter] CoverLayout Layout { get; set; }

	private ClaimsPrincipal user;
	private ulong userSnowflake;

	private bool formWasSubmitted;

	protected override async Task OnParametersSetAsync()
	{
		Layout.SetCover("Inscription", "Rejoignez le serveur Transgenres Community.");

		user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
		userSnowflake = Convert.ToUInt64(user.FindFirstValue(ClaimTypes.NameIdentifier));

		await base.OnParametersSetAsync();
	}

	private void OnValidForm() => formWasSubmitted = true;
}
