@page "/glossary/{EntryName}"
@layout CoverLayout
@inject Transcom.Web.Services.GlossaryService GlossaryService
@inject NavigationManager NavigationManager 

<div class="row">
	<div class="col">
		<nav aria-label="breadcrumb">
			<ol class="breadcrumb mb-5">
				<li class="breadcrumb-item"><NavLink href="/glossary">Lexique</NavLink></li>
				<li class="breadcrumb-item active" aria-current="page">@(Entry?.DisplayTitle ?? EntryName)</li>
			</ol>
		</nav>
	</div>

	<AuthorizeView Roles="admin">
		@if (Entry is not null)
		{
			<div class="col-auto">
				<NavLink href=@($"/glossary/{EntryName}/edit") class="btn btn-sm btn-warning">Editer</NavLink>
				<button class="btn btn-sm btn-danger" @onclick=ToggleDeleteModal>Supprimer</button>
			</div>
		}

		@if (showDeletionModal)
		{
			<DeleteConfirm OnConfirm=OnDeleteConfirmAsync OnCancel=ToggleDeleteModal />
		}
	</AuthorizeView>
</div>

@if (Entry is not null)
{
	@Entry.Markup
}
else if (Loaded)
{
	<h4 class="text-warning">Aucun contenu trouvé.</h4>
}
else
{
	<h4 class="text-info">Chargement...</h4>
}


@code {
	[CascadingParameter] CoverLayout Layout { get; init; }
	[Parameter] public string EntryName { get; init; }

	public GlossaryEntry Entry { get; private set; }
	public bool Loaded { get; private set; }

	private bool showDeletionModal;

	protected override async Task OnParametersSetAsync()
	{
		Loaded = false;
		Entry = await GlossaryService.FetchEntryAsync(EntryName);

		Layout.SetCover("Lexique", Entry?.DisplayTitle, subtitleHeader: true);

		await base.OnParametersSetAsync();
		Loaded = true;
	}

	private async Task OnDeleteConfirmAsync()
	{
		await GlossaryService.DeleteEntryAsync(Entry.Id);
		NavigationManager.NavigateTo("/glossary");
	}
	private void ToggleDeleteModal() => showDeletionModal = !showDeletionModal;
}
