@page "/resources/glossary"
@layout CoverLayout
@inject GlossaryService GlossaryService
@inject AuthenticationStateProvider AuthenticationStateProvider



<div class="row">
	<div class="col">
		<nav aria-label="breadcrumb">
			<ol class="breadcrumb mb-5">
				<li class="breadcrumb-item active" aria-current="page">Lexique</li>
			</ol>
		</nav>
	</div>

	<AuthorizeView Roles="Admin,GlossaryEditor">
		<div class="col-auto">
			<NavLink href="/resources/glossary/new" class="btn btn-sm btn-success">Ajouter</NavLink>
		</div>
	</AuthorizeView>
</div>

<div class="row justify-content-between text-start">
	<div class="col-lg-8 my-5">
		<h1>Parcourir</h1>

		<div class="my-3">
			<div class="btn-group">
				@for (int i = 0; i < GlossaryEntries.Count(); i++)
				{
					int current = i;
					var probe = GlossaryEntries[i];

					<button class=@($"btn btn-primary {(currentLetter == i ? "active" : null)}") @onclick="() => { currentLetter = current; }">@GlossaryEntries[i].Key</button>
				}
			</div>
		</div>

		<div class="card">
			<div class="card-body bg-dark">
				<ul class="m-3">
					@foreach (GlossaryEntry entry in GlossaryEntries[currentLetter].AsEnumerable())
					{
						if (entry.Visible)
						{
							<li>
								<a class="link-secondary" href=@($"/resources/glossary/{entry.UrlTitle}")>@entry.DisplayTitle</a>
							</li>
						}
						else if (userIsEditor)
						{
							<li>
								<a class="link-secondary" href=@($"/resources/glossary/{entry.UrlTitle}")>@entry.DisplayTitle</a>
								<span class="text-muted bi-type-italic">[Invisible]</span>
							</li>
						}
					}
				</ul>
			</div>
		</div>

	</div>
	<div class="col-lg-4 my-5">
		<h1 class="mb-3">Rechercher</h1>

		<EditForm Model=CurrentSearch OnValidSubmit=HandleValidSubmitAsync>
			<DataAnnotationsValidator />

			<div class="input-group">
				<InputText @bind-Value="CurrentSearch.Search" class="form-control" id="Search" placeholder="Recherche" DisplayName="Search" />

				<div class="input-group-append">
					<button type="submit" class="btn btn-primary px-3">Rechercher</button>
				</div>
			</div>

			<div class="lead mt-3">
				<ValidationSummary />
			</div>
		</EditForm>

		@if (Results is not null)
		{
			<div class="mx-3 my-5">
				@if (Results.Count() is int count and not 0)
				{
					<h4 class="text-success mb-3">@count résultat(s) :</h4>

					<ul>
						@foreach (GlossaryEntry entry in Results)
						{
							if (entry.Visible)
							{
								<li class="lead">
									<NavLink class="link-secondary" href=@($"/resources/glossary/{entry.UrlTitle}")>
										@entry.DisplayTitle
									</NavLink>
								</li>
							}
							else if (userIsEditor)
							{
								<li class="lead">
									<NavLink class="link-secondary" href=@($"/resources/glossary/{entry.UrlTitle}")>
										@entry.DisplayTitle
									</NavLink>

									<span class="text-muted bi-type-italic">[Invisible]</span>
								</li>
							}
						}
					</ul>
				}
				else
				{
					<h4 class="text-warning">Aucun résultat.</h4>
				}
			</div>
		}
		else if (Searching)
		{
			<h4 class="text-info my-5">Recherche...</h4>
		}
	</div>
</div>



@code {
	[CascadingParameter] CoverLayout Layout { get; set; }


	public SearchModel CurrentSearch { get; set; } = new SearchModel();
	public IEnumerable<GlossaryEntry> Results { get; set; }
	public IGrouping<char, GlossaryEntry>[] GlossaryEntries { get; set; }

	public bool Searching { get; private set; }

	private int currentLetter;
	private AuthenticationState authState;
	private bool userIsEditor;

	protected override async Task OnParametersSetAsync()
	{
		Layout.SetCover("Lexique", "Tout ce qu'il vous faut pour comprendre le monde Transgenre.");
		await base.OnParametersSetAsync();

		authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		userIsEditor = authState.User.IsInRole(UserRoles.GlossaryEditor);
	}

	protected override void OnInitialized()
	{
		GlossaryEntries = GlossaryService.GetEntriesByStartLetter().ToArray();
		base.OnInitialized();
	}

	protected async Task HandleValidSubmitAsync()
	{
		Results = null;
		Searching = true;
		Results = ((CurrentSearch.Search is null || CurrentSearch.Search.Length > 2)
			? await GlossaryService.SearchEntriesAsync(CurrentSearch.Search) : null)
			?? Array.Empty<GlossaryEntry>();

		if (!userIsEditor)
		{
			Results = Results.Where(e => e.Visible);
		}
		Searching = false;
	}


	public record SearchModel
	{
		[Required(ErrorMessage = "Veuillez entrer un terme de recherche."), StringLength(100, MinimumLength = 2)]
		public string Search { get; set; }
	}
}